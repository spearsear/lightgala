//var db_str = 'lightuser:test@localhost:27017/holilight';
var db_str = 'mongodb://lightuser:test@ds053320.mongolab.com:53320/holilight';
var host_str = 'http://localhost:3000';
var express = require('express');
var mongoose = require('mongoose');
var bcrypt = require('bcryptjs');
var oauth = require("./oauth.js");  //oauth and openids
var passport = require("passport");
var LocalStrategy = require("passport-local").Strategy;
var FacebookStrategy = require("passport-facebook").Strategy;
var TwitterStrategy = require("passport-twitter").Strategy;
var GithubStrategy = require("passport-github").Strategy;
var GoogleStrategy = require("passport-google").Strategy;
var myaccessctrl = require("./myaccessctrl.js");
var agenda = require("agenda")({db: {address: db_str}});
var sugar = require("sugar");
var nodemailer = require("nodemailer")
var router = express.Router();
require('./mongoose-paginate.js');

//====================db schema preparation for mongoose==================
//decorSchema is not strict so data not defined can be saved into db
var decorSchema = new mongoose.Schema({
    //_id: mongoose.Schema.ObjectId,   _id will be generated by mongodb, not a must have
    decor: {
	user_id: {type: mongoose.Schema.Types.ObjectId, ref: 'User'},
	designer: String,
	create_time: Date,
	last_mod_time: Date,
	address: {label: String, coords: {type: [Number], index:'2d'}, geo: {lat: Number, lng: Number}},
	tag: String,
	title: String,
	publish: {type: Boolean, default: false},
	askpro: {type: Boolean, default: false},
	allowcomment: {type: Boolean, default: true},
	emailto: String,
	num_inches_per_x_unit: {type: Number},
	views: {type: Number, default: 0},
	/*tag: String,
	backgroundurl: String,
	user: [{
	    type: mongoose.Schema.Types.ObjectId, ref: 'User'
	}],
	decor_lines: [{
	    decor_line_id: Number,
	    decor_line_type: String,
	    elements: [{
		id: Number,
		color: String
	    }]
	}]*/
    },
    subscribers: [{
	type: mongoose.Schema.Types.ObjectId, ref: 'User'
    }],
    thumbs: {
	up: Number,
	down: Number
    }
},{strict: false});

//define customize methods
//decorSchema.methods.coords = function(){
//    return [this.address.geo.lng,this.address.geo.lat];
//}

var userSchema = new mongoose.Schema({
    email: {type: String, unique: true},
    password: String
});

userSchema.pre('save', function(next){
    var user = this;
    if (!user.isModified('password')) return next();
    bcrypt.genSalt(10,function(err,salt){
	if (err) return next(err);
	bcrypt.hash(user.password,salt,function(err,hash){
	    if (err) return next(err);
	    user.password = hash;
	    next();
	})
    })
})

userSchema.methods.comparePassword = function(candidatePassword,cb){
    bcrypt.compare(candidatePassword,this.password,function(err, isMatch){
	if (err) return cb(err);
	cb(null,isMatch);
    })
}

var db = mongoose.connect(db_str,function(err){
    if(err){
	console.log('connection error',err);
    }else{
	console.log('connection successful');
    }
});
var User = db.model('User',userSchema);
var Decor = db.model('Decor',decorSchema,'decors');

//======================api to access decors collection==================
router.get('/api/decors',function(req,res,next){
    //console.log(req.query);
    var query = Decor.find();
    if(req.user){
	//show decors by sepcific user
	query.where({'decor.user_id': req.user._id});
    }else{
	query.where({'decor.publish': true});
    }
    //further refine query based on user entered filter
    if(req.query.criteria){
	if(req.query.criteria_type == 'has_keyword'){
	    query.or([{'decor.designer': new RegExp('.*'+req.query.criteria+'.*','i')},
		      {'decor.address.label': new RegExp('.*'+req.query.criteria+'.*','i')},
		      {'decor.tag': new RegExp('.*'+req.query.criteria+'.*','i')},
		      {'decor.title': new RegExp('.*'+req.query.criteria+'.*','i')}]
		    );
	}
	if(req.query.criteria_type == 'mongoose_query'){
	    //console.log("executing a mongoose query specified at client");
	    //sample mongoose_query criteria: 
	    //last modified within a week: .gt('decor.last_mod_time',(new Date()).setDate(from_time.getDate()-7))
	    //console.log('query'+unescape(req.query.criteria));
	    eval('query'+unescape(req.query.criteria));
	}
    }
    var page = req.query.page, perPage = 12;//20;
    query.paginate({limit:perPage,offset:perPage * page},function(err,total,decors){
	if(err){
	    res.status(500).send('Data fetching broken');
	}else{
	    //console.log('total: ', total);
	    //res.send(decors);
	    res.send([{
		page: page,     //current page returned
		decors:decors,
		lastpage: (total-page*perPage)>perPage? false : true
	    }]);
	}
    })
});

router.get('/api/decors/:id/',myaccessctrl.ensureDesignerOfDecor.bind({Decor:Decor}),function(req,res,next){
    /*Decor.findById(req.params.id,function(err,decor){
	if (err) return next(err);
	res.send(decor);
    })*/
    //console.log(req.query.mode);
    if(req.query.mode == 'edit'){
	//console.log("get decor for edit")
	Decor.findById(req.params.id,function(err,decor){
	    if (err) return next(err);
	    res.send(decor);
	})
    }else{
	//play or edit_template
	Decor.findByIdAndUpdate(req.params.id,{$inc: {"decor.views":1}},{ upsert: false })
	    .populate('decor.user_id')
	    .exec(function(err,decor){
	    if (err) {
		console.log("error occured in findByIdAndUpdate " + err);
		return next(err);
	    }
	    res.json(decor);
	});
    }
})

router.post('/api/decors/',
	    myaccessctrl.ensureCaptcha,
	    myaccessctrl.ensureAuthenticated,
	    function(req,res,next){
    //both save and create works
    /*var decor = new Decor({
	decor:req.body.decor,
	widgets:req.body.widgets,
	tools:req.body.tools,
	animations:req.body.animations,
    });
    decor.save(function(err,data){
	console.log('saved data:' + data);
    })*/
    //Decor.create(req.body,function(err,decor){
    Decor.create(req.body.data,function(err,decor){
	if (err) {
	    console.log("error occured" + err);
	    return next(err);
	}
	var emailDate = Date.create("2 minutes from now");
	agenda.schedule(emailDate, 'send email after save', decor._id);//.repeatEvery('1 week');
	if(decor.decor.askpro){
	    agenda.schedule(Date.create("3 minutes from now"), 'invite pro to design', decor._id);//.repeatEvery('1 week');
	}
	res.json(decor);
    })
})

router.put('/api/decors/:id',
	   myaccessctrl.ensureCaptcha,
	   myaccessctrl.ensureDesignerOfDecor.bind({Decor:Decor}),
	   function(req,res,next){
    //how to set decor and other fields like animations
    Decor.findByIdAndUpdate(req.params.id,
			    {$set: {decor:req.body.data.decor, 
				    //subscribers:req.body.data.subscribers,    //subscribers updated by reader
				    //thumbs:req.body.data.thumbs,
				    animations:req.body.data.animations}},
			    { upsert: true },
			    function(err,decor){
				if (err) {
				    console.log("error occured in findByIdAndUpdate " + err);
				    return next(err);
				}
				//Suger: var alertDate = Date.create('Next ' + show.airsDayOfWeek + ' at ' + show.airsTime).rewind({ hour: 2});
				//Next Saturday at 8:00 PM
				var emailDate = Date.create("2 minutes from now");
				agenda.schedule(emailDate, 'send email after save', decor._id);//.repeatEvery('1 week');
				if(decor.decor.askpro){
				    agenda.schedule(Date.create("3 minutes from now"), 'invite pro to design', decor._id);//.repeatEvery('1 week');
				}
				res.json(decor);
			    });
})

router.delete('/api/decors/:id',myaccessctrl.ensureDesignerOfDecor.bind({Decor:Decor}),function(req,res,next){
    Decor.findByIdAndRemove(req.params.id,req.body,function(err,decor){
	if (err) return next(err);
	res.send(decor);
    })
});

//================api to access user collection for login/logout/signup================
//login data is passed to Passport LocalStrategy
passport.serializeUser(function(user,done){
    done(null,user.id);
});

passport.deserializeUser(function(id,done){
    User.findById(id,function(err,user){
	done(err,user);
    });
})

passport.use(new LocalStrategy({usernameField: 'email'},function(email,password,done){
    User.findOne({email: email},function(err,user){
	if (err) return done(err);
	if (!user) return done(null,false);
	user.comparePassword(password,function(err,isMatch){
	    if (err) return done(err);  //db err
	    if (isMatch) return done(null,user);   //password matching
	    return done(null,false);    //password not match
	})
    })
}));

router.post('/api/login',passport.authenticate('local'),function(req,res){
    res.cookie('user',JSON.stringify(req.user));
    res.send(req.user);
});

router.post('/api/signup',function(req,res,next){
    var user = new User({
	email: req.body.email,
	password: req.body.password
    });
    user.save(function(err){
	if (err) return next(err);
	res.send(200);
    })
});

router.get('/api/logout',function(req,res,next){
    req.logout();
    res.send(200);
});

//====================api to subscribe/unsubscribe/thumbup/thumbdown================
router.post('/api/subscribe',myaccessctrl.ensureAuthenticated,function(req,res,next){
    console.log("decor_id: "+req.body.decor_id);
    Decor.findById(req.body.decor_id,function(err,decor){
	if (err) {
	    return next(err);
	}
	if (!decor.subscribers) {
	    Decor.update({_id:decor._id},{subscribers:[req.user.id]},{multi:true},function(err,numberAffected){
		//numberAffected should be 1
	    });
	}else{
	    decor.subscribers.push(req.user.id);
	}
	decor.save(function(err){
	    if (err) {
		return next(err);
	    }
	    res.send(200);
	})
    })
});

router.post('/api/unsubscribe',myaccessctrl.ensureAuthenticated,function(req,res,next){
    Decor.findById(req.body.decor_id,function(err,decor){
	if (err) return next(err);
	if(decor.subscribers){
	    var index = decor.subscribers.indexOf(req.user.id);
	    decor.subscribers.splice(index,1);
	}
	decor.save(function(err){
	    if (err) return next(err);
	    res.send(200);
	})
    })
});

router.post('/api/thumbup',function(req,res,next){
    Decor.findById(req.body.decor_id,function(err,decor){
	if (err) {
	    return next(err);
	}
	if (!decor.thumbs) {
	    console.log("add thumbs field");
	    Decor.update({_id:decor._id},{thumbs:{up:0,down:0}},{multi:true},function(err,numberAffected){
		//numberAffected should be 1
	    });
	}else{
	    console.log("incrementing thumbs up");
	    decor.thumbs.up = !isNaN(decor.thumbs.up)? decor.thumbs.up+1 : 1;
	}
	decor.save(function(err){
	    if (err) {
		console.log("err occurred while saving" + err);
		return next(err);
	    }
	    console.log("saving successful");
	    res.send(200);
	})
    })
});

router.post('/api/thumbdown',function(req,res,next){
    Decor.findById(req.body.decor_id,function(err,decor){
	if (err) return next(err);
	if(!decor.thumbs){
	    Decor.update({_id:decor._id},{thumbs:{up:0,down:0}},{multi:true},function(err,numberAffected){
		//numberAffected should be 1
	    });
	}else{
	    decor.thumbs.down = !isNaN(decor.thumbs.down)? decor.thumbs.down+1 : 1;
	}
	decor.save(function(err){
	    if (err) return next(err);
	    res.send(200);
	})
    })
});

//====================agenda schedule to send email to emailto and subscribers==================
agenda.define('send email after save',function(job,done){
    Decor.findOne({_id:job.attrs.data}).populate('subscribers').exec(function(err,decor){
	//console.log("decor found to process email:")
	//console.log(decor);
	var emails_subscribers = decor.subscribers.map(function(user){
	    return user.email;
	})

	var emails_emailto = decor.decor.emailto?decor.decor.emailto:'';
	var emails = emails_subscribers.join(',') + emails_emailto.length>0? emails_emailto : '';

	var smtpTransport = nodemailer.createTransport({
	    service: 'Gmail',
	    auth: {user:'spearsear@gmail.com',pass:'notpassword'}
	});

	var mailOptions = {
	    from: 'Stephen Spearsberg <spearsear@gmail.com>',
	    to: emails,
	    subject: decor.decor.address.label + ' is lighting up',
	    text: 'Hi, there,\n' + decor.decor.designer + ' has recently designed lighting at ' + decor.decor.address.label + '.\n' +
		'Please go to lighttube.com and search for the address. \nEnjoy!',
	    html: 'Hi, there,<br>' + decor.decor.designer + ' has recently designed lighting at <strong>' + decor.decor.address.label + '</strong>.\n<br>' +
		'Please <a href="' + host_str + '/decor/'+ decor._id +'">click here</a> to enjoy the lighting\n<br>'+
		'You can <a href="'+ host_str + '/decor/">design your own</a> also.<br> Enjoy!'
	};

	if(emails.length>1){
	    smtpTransport.sendMail(mailOptions,function(err,info){
		if(err){
		    console.log(err);
		}else{
		    smtpTransport.close();
		    done();
		}
	    })
	}else{
	    console.log('no emails specified, skip sending emails');
	}
    });
});

agenda.define('invite pro to design',function(job,done){
    Decor.findOne({_id:job.attrs.data}).exec(function(err,decor){
	var emails_pro = ['lighttube.com@gmail.com'];
	var emails = emails_pro.join(',');

	var smtpTransport = nodemailer.createTransport({
	    service: 'Gmail',
	    auth: {user:'spearsear@gmail.com',pass:'notpassword'}
	});

	var mailOptions = {
	    from: 'Stephen Spearsberg <spearsear@gmail.com>',
	    to: emails,
	    subject: decor.decor.address.label + ' is looking for lighting design',
	    text: '' + decor.decor.designer + ' at ' + decor.decor.address.label + ' is interested in having a professional to design lighting for the holiday.\n' +
		'Please go to lighttube.com and search for the address. \nEnjoy!',
	    html: '' + decor.decor.designer + ' at <strong>' + decor.decor.address.label + '</strong> is interested in having a professional to design lighting for the holiday.\n<br>' +
		'His/her own design can be seen <a href="'+ host_str + '/decor/' + decor._id + '">here</a>, ' +
		'Please <a href="' + host_str + '/decor/template/'+ decor._id +'">click here</a> to design the lighting for ' + decor.decor.designer + '.\n<br>Enjoy!'
	};

	if(emails.length>1){
	    smtpTransport.sendMail(mailOptions,function(err,info){
		if(err){
		    console.log(err);
		}else{
		    smtpTransport.close();
		    done();
		}
	    })
	}else{
	    console.log('no emails specified, skip sending emails');
	}
    });
});

agenda.start();

agenda.on('start',function(job){
    console.log('Job %s starting',job.attrs.name);
});

agenda.on('complete',function(job){
    console.log('Job %s finished',job.attrs.name);
});

module.exports = router;
